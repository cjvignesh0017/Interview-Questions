#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* next;
};
struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) 
    {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void addToHead(struct Node** head, int data) 
{
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}
void addToTail(struct Node** head, int data) 
{
    struct Node* newNode = createNode(data);
    if (*head == NULL) 
    {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) 
    {
        current = current->next;
    }
    current->next = newNode;
}
void insertAfter(struct Node* prevNode, int data) 
{
    if (prevNode == NULL) 
    {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}
void deleteNode(struct Node** head, int key) 
{
    struct Node* temp = *head;
    struct Node* prev = NULL;
    if (temp != NULL && temp->data == key) 
    {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != key) 
    {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) 
    {
        printf("Key not found in the list.\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
}
void printList(struct Node* head) 
{
    struct Node* current = head;
    while (current != NULL) 
    {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
void freeList(struct Node* head) 
{
    struct Node* current = head;
    struct Node* nextNode;
    while (current != NULL) 
    {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}
int main() 
{
    struct Node* head = NULL;
    addToTail(&head,1);
    addToTail(&head,2);
    addToHead(&head,3);
    insertAfter(head->next,4);
    printf("Linked List: ");
    printList(head);
    deleteNode(&head,1);
    printf("Linked List after deletion: ");
    printList(head);
    freeList(head);
    return 0;
}
